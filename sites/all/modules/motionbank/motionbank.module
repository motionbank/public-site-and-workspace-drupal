<?php
    /* Motion Bank module */
    
    /**
     *  Hook menu, see:
     *  http://api.drupal.org/api/function/hook_menu
     */
    
    function motionbank_menu ( )
    {
        $items = array();
        
        $items['login'] = array(
            'title' => t('Login'),
            'page callback' => '_motionbank_login',
            'access arguments' => array('global nothing'),
            'type' => MENU_CALLBACK
        );

        $items['partial/comment/reply/%node'] = array(
          'title' => 'Reply to comment',
          'page callback' => '_motionbank_partial_comment_reply',
          'page arguments' => array(3),
          'access arguments' => array( 'post comments' ),
          'type' => MENU_CALLBACK
        );
        
        $items['partial/comment/edit'] = array(
            'title' => 'Edit comment',
            'page callback' => '_motionbank_partial_comment_edit',
            'access arguments' => array('post comments'),
            'type' => MENU_CALLBACK,
        );
      
        return $items;
    }
    
    /**
     *  Hook perm to suffice login menu item
     */
    
    function motionbank_perm ()
    {
        return array( 'global nothing' );
    }
    
    /**
     *  Hook node api
     */
    
    function motionbank_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
    {
        switch ($op)
        {
            //
            case 'alter':
                if ( isset($node->links) && is_array($node->links) )
                {
                    global $current_node_links;
                    $current_node_links = $node->links;
                    $node->links = array();
                }
                break;
            
            // auto generate link aliases for group (aka project) pages
          case 'insert':
          case 'update':
            if ( $node->type == 'project' )
            {
                //path_set_alias( 'node/'.$node->nid, 'project/'.$node->nid );
                path_set_alias( 'og/users/'.$node->nid.'/faces', 'project/'.$node->nid.'/users' );
            }
            break;
        }
    }

    /**
     *  Hook form alter.
     */
    
    function motionbank_form_alter( &$form, &$form_state, $form_id )
    {
        if ( $form_id == 'comment_form' )
        {
            // remove "Your name: ..." above form
            $form["_author"] = array();
            
            // remove "Comment" above textarea
            $form['comment_filter']['comment']['#title'] = '';
            
            // remove filter guidelines and more info link
            foreach ($form['comment_filter']['format'] as $i => $filter)
            {
                /* More information link ... */
                if (is_int($i) && !$filter['#type'])
                {
                    $form['comment_filter']['format'][$i]['#value'] = '';
                }
                else if ( $filter['guidelines'] )
                {
                    $form['comment_filter']['format'][$i]['guidelines'] = array();
                }
            }
            
            $show_collapsed = true;
            // Todo: remove "Reply" / "Edit" / "Post new comment" title
            foreach ( $form['#parameters'] as $k => $field )
            {
                if ( $field == t('Post new comment') )
                {
                    $form['#parameters'][$k] = '';
                }
                
                if ( is_array($field) && isset($field['pid']) && isset($field['nid']) )
                    $show_collapsed = false;
            }
            
            if ( $show_collapsed )
            {
                // create fieldset to hold form
                $form['comment_wrapper'] = array(
                    '#type' => 'fieldset',
                    '#title' => t('Post new comment'),
                    '#weight' => 5,
                    '#collapsible' => TRUE,
                    '#collapsed' => $show_collapsed,
                  );
                
                // put visible form elements into fieldset
                foreach ( array('comment_filter', 'submit', 'preview') as $field )
                {
                    $form['comment_wrapper'][$field] = $form[$field];
                    unset( $form[$field] );
                }
            }
        }
    }
    
    /**
     *  Login or dashboard
     */
    function _motionbank_login (  )
    {
        global $user;
        
        if ( $user->uid == 0 )
        {
            drupal_goto( 'user' );
        }
        else
        {
            drupal_goto( '' );   
        }
    }
    
    /**
     *  Render comment edit page and return.
     */
    
    function _motionbank_partial_comment_edit ( $cid )
    {
        if ( !function_exists('comment_edit') )
        {
            require_once( drupal_get_path('module', 'comment') . '/' . 'comment.pages.inc' );
        }
        
        print comment_edit( $cid );
        exit();
    }
    
    /**
     *  Render comment reply page and return it.
     *
     *  See: comment/comment.pages.inc
     */

    function _motionbank_partial_comment_reply ( $node, $pid = NULL )
    {
        if ( !function_exists('comment_reply') )
        {
            require_once( drupal_get_path('module', 'comment') . '/' . 'comment.pages.inc' );
        }
        
        print comment_form_box(array('pid' => $pid, 'nid' => $node->nid), t('Reply'));
        exit();
    }