<?php
    /* Motion Bank module */
    
    /**
     *  Hook menu, see:
     *  http://api.drupal.org/api/function/hook_menu
     */
    
    function motionbank_menu ( )
    {
        $items = array();
        
        $items['login'] = array(
            'title' => t('Login'),
            'page callback' => '_motionbank_login',
            'access arguments' => array('global nothing'),
            'type' => MENU_CALLBACK
        );

        $items['partial/comment/reply/%node'] = array(
          'title' => 'Reply to comment',
          'page callback' => '_motionbank_partial_comment_reply',
          'page arguments' => array(3),
          'access arguments' => array( 'post comments' ),
          'type' => MENU_CALLBACK
        );
        
        $items['partial/comment/edit'] = array(
            'title' => 'Edit comment',
            'page callback' => '_motionbank_partial_comment_edit',
            'access arguments' => array('post comments'),
            'type' => MENU_CALLBACK,
        );
        
        $items['user/%/resend/%'] = array (
            'title' => 'Resend welcome message',
            'page callback' => '_motionbank_user_resend_welcome',
            'page arguments' => array(1, 3),
            'access arguments' => array('administer users'),
            'type' => MENU_CALLBACK
        );
      
        return $items;
    }
    
    /**
     *  Hook user operations: admin/user/user/list
     */
    
    function motionbank_user_operations() {
        $operations = array(
            'motionbank resend welcome mail' => array(
                'label' => t('Resend account created mail'), 
                'callback' => 'motionbank_user_operation_resend_welcome',
            )
        );
        return $operations;
    }
    
    /**
     *  Hook perm to suffice login menu item
     */
    
    function motionbank_perm ()
    {
        return array( 'global nothing' );
    }
    
    /**
     *  Hook node api
     */
    
    function motionbank_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
    {
        switch ($op)
        {
            //
            case 'alter':
                if ( isset($node->links) && is_array($node->links) )
                {
                    global $current_node_links;
                    $current_node_links = $node->links;
                    $node->links = array();
                }
                break;
            
            // auto generate link aliases for group (aka project) pages
          case 'insert':
          case 'update':
            if ( $node->type == 'project' )
            {
                //path_set_alias( 'node/'.$node->nid, 'project/'.$node->nid );
                path_set_alias( 'og/users/'.$node->nid.'/faces', 'project/'.$node->nid.'/users' );
            }
            break;
        }
    }

    /**
     *  Hook form alter.
     */
    
    function motionbank_form_alter( &$form, &$form_state, $form_id )
    {
        
    // changes to node form for organic groups
        
        if ( $form_id == 'project_node_form' )
        {
            $container = array(
                '#type' => 'fieldset',
                '#title' => t('Project settings'),
                '#weight' => 5,
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            );
            foreach ( $form as $k => $v )
            {
                if ( strpos($k, 'og_') === 0 && $k !== 'og_description' )
                {
                    $container[$k] = $form[$k];
                    unset($form[$k]);
                }
            }
            $form['og_container'] = $container;
        }
        
    // changes to comment form
        
        if ( $form_id == 'comment_form' )
        {
            // remove "Your name: ..." above form
            $form["_author"] = array();
            
            // remove "Comment" above textarea
            $form['comment_filter']['comment']['#title'] = '';
            
            // remove filter guidelines and more info link
            foreach ($form['comment_filter']['format'] as $i => $filter)
            {
                /* More information link ... */
                if (is_int($i) && !$filter['#type'])
                {
                    $form['comment_filter']['format'][$i]['#value'] = '';
                }
                else if ( $filter['guidelines'] )
                {
                    $form['comment_filter']['format'][$i]['guidelines'] = array();
                }
            }
            
            $show_collapsed = true;
            // Todo: remove "Reply" / "Edit" / "Post new comment" title
            foreach ( $form['#parameters'] as $k => $field )
            {
                if ( $field == t('Post new comment') )
                {
                    $form['#parameters'][$k] = '';
                }
                
                if ( is_array($field) && isset($field['pid']) && isset($field['nid']) )
                    $show_collapsed = false;
            }
            
            if ( $show_collapsed )
            {
                // create fieldset to hold form
                $form['comment_wrapper'] = array(
                    '#type' => 'fieldset',
                    '#title' => t('Post new comment'),
                    '#weight' => 5,
                    '#collapsible' => TRUE,
                    '#collapsed' => $show_collapsed,
                  );
                
                // put visible form elements into fieldset
                foreach ( array('comment_filter', 'submit', 'preview') as $field )
                {
                    $form['comment_wrapper'][$field] = $form[$field];
                    unset( $form[$field] );
                }
            }
        }
    }
    
    /**
     *  Hook block
     *
     *  http://api.drupal.org/api/function/hook_block/6
     */
    
    function motionbank_block ( $op = 'list', $delta = 0, $edit = array() )
    {
        if ($op == 'list')
        {
            $blocks[0] = array( 'info' => t('Local tasks block'),
                                'cache' => BLOCK_CACHE_PER_PAGE
            );
            
            $blocks[1] = array( 'info' => t('Node links block'),
                                'cache' => BLOCK_CACHE_PER_PAGE
            );
            
            return $blocks;
        }
        else if ($op == 'configure')
        {
        }
        else if ($op == 'save')
        {
        }
        else if ($op == 'view')
        {
            switch($delta) {
              case 0:
                $object = _mb_get_current_object();
                $title = t('Local tasks');
                if ( $object->nid )
                    $title = l( $object->title, $object->path );
                $block = array(
                    'subject' => $title,
                    'content' => _motionbank_render_block_1()
                );
                break;
              case 1:
                $block = array(
                    'subject' => t('Node links'),
                    'content' => _motionbank_render_block_2()
                );
                break;
            }
            return $block;
        }
    }
    
    /**
     *  Bulk re-send welcome email
     */
    
    function motionbank_user_operation_resend_welcome ( $receivers )
    {
        foreach ( $receivers as $receiver )
        {
            _motionbank_user_resend_welcome( $receiver, 'register_admin_created' );
        }
    }
    
    /**
     *  Resend welcome message
     */
    
    function _motionbank_user_resend_welcome ( $receiver, $operation )
    {
        if ( is_numeric($receiver) ) // than its an / treat as UID
            $receiver = user_load( array('uid'=>$receiver) );
        else if ( is_array($receiver) )
            $receiver = (object)$receiver;
        
        if ( !$receiver || !is_object($receiver) || !$receiver->uid )
            drupal_set_message( t('User does not exist'), 'error' );
        else
        {
            if ( function_exists('_user_mail_notify') )
            {
                $receiver->password = t( 'Please use one time login link below and change your password once logged in.' );
                
                _user_mail_notify( $operation, $receiver );
                
                if ( $operation == 'register_admin_created' )
                    $message = t('"Account created" mail was sent to %user', array('%user'=>$receiver->name));
                else
                    $message = t('Message for %op was sent again.', array('%op'=>$operation));
                
                drupal_set_message( $message, 'message' );
            }
        }
        
        //drupal_goto('users'); // user ?destination=blah instead
    }
    
    /**
     *  Render local tasks
     */
    
    function _motionbank_render_block_1 ()
    {
        $primary = menu_primary_local_tasks();
        
        if ( empty($primary) ) // hides the block
            return null;
        
        $secondary = menu_secondary_local_tasks();
        
        if ( !empty($secondary) )
        {
            $primary = preg_replace( '/(<li[^>]*class="active"[^>]*>.+)(<\/li>)/im', '\1<ul>'.$secondary.'</ul>\2', $primary );
        }
        
        $links = _motionbank_render_block_2();
        
        return '<ul'.(empty($links)?'':' class="chained"').'>'.$primary.'</ul>'.$links;
    }
    
    /**
     *  Render node links block
     */
    
    function _motionbank_render_block_2 ()
    {
        $node = _mb_get_current_object();
        
        if ( empty($node->nid) ) return null;
        
        $node->links = module_invoke_all('link', 'node', $node, FALSE);
        
        return theme('links',$node->links);
    }
    
    /**
     *  Get currently viewed object based on menu
     */
    
    function _mb_get_current_object ()
    {
        static $current_object;
        if ( !isset($current_object) )
            $current_object = menu_get_object();
        return $current_object;
    }
    
    /**
     *  Login or dashboard
     */
    function _motionbank_login (  )
    {
        global $user;
        
        if ( $user->uid == 0 )
        {
            drupal_goto( 'user' );
        }
        else
        {
            drupal_goto( '' );   
        }
    }
    
    /**
     *  Render comment edit page and return.
     */
    
    function _motionbank_partial_comment_edit ( $cid )
    {
        if ( !function_exists('comment_edit') )
        {
            require_once( drupal_get_path('module', 'comment') . '/' . 'comment.pages.inc' );
        }
        
        print comment_edit( $cid );
        exit();
    }
    
    /**
     *  Render comment reply page and return it.
     *
     *  See: comment/comment.pages.inc
     */

    function _motionbank_partial_comment_reply ( $node, $pid = NULL )
    {
        if ( !function_exists('comment_reply') )
        {
            require_once( drupal_get_path('module', 'comment') . '/' . 'comment.pages.inc' );
        }
        
        print comment_form_box(array('pid' => $pid, 'nid' => $node->nid), t('Reply'));
        exit();
    }