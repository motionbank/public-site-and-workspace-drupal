<?php
// $Id: og_access_roles.module,v 1.1.2.1 2010/01/18 01:19:05 marcp Exp $

/**
 * @file
 * Access private groups based on user roles.
 */

define('OG_ACCESS_ROLES_REALM', 'og_access_roles');

/**
 * Implementation of hook_menu().
 */
function og_access_roles_menu() {
  $items['admin/og/og_access_roles'] = array(
    'title' => 'Organic groups roles access configuration',
    'description' => 'Configure the roles that get presented as visibility options for group posts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_access_roles_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * The og_access_roles settings form.
 */
function og_access_roles_settings() {
  $form = array();

  $options = user_roles();
  $default_value = variable_get('og_access_roles_choices', array());

  $form['og_access_roles_choices'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#description' => t('Roles that should appear in the visibility options when creating or modifying a node.'),
    '#options' => user_roles(),
    '#default_value' => $default_value,
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function og_access_roles_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $node = $form['#node'];
    if (og_is_group_post_type($node->type)) {
      $default_value = array();
      if (!empty($node->nid) && !empty($node->og_access_roles)) {
        foreach ($node->og_access_roles as $rid) {
          $default_value[$rid] = $rid;
        }
      }

      $roles = user_roles();
      $role_choices = array_intersect_key($roles, array_filter(variable_get('og_access_roles_choices', array())));

      if (!empty($role_choices)) {
        $form['og_nodeapi']['og_access_roles'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Make visible to all users in the following roles'),
          '#description' => t('Users in the selected roles can view this post regardless of their group memberships.'),
          '#options' => $role_choices,
          '#default_value' => $default_value,
        );
      }
    }
  }
}

/**
 * Presave node's nid, rid combinations for cleaner insertion
 * into og_access_roles.  After leaving this function, $node->og_access_roles
 * will be a zero-based numerically indexed array of role ids, the same way it
 * gets filled on hook_nodeapi('load').
 *
 * @param $node The node that's having its nid, rid combinations massaged.
 */
function og_access_roles_presave_roles(&$node) {
  if (!empty($node->og_access_roles)) {
    $node->og_access_roles = array_values(array_filter($node->og_access_roles));
  }
}

/**
 * Insert nid, rid combinations into og_access_roles.
 *
 * @param $node The node that's having its nid, rid combinations inserted.
 */
function og_access_roles_insert_roles(&$node) {
  if (!empty($node->og_access_roles)) {
    $rids = array_filter($node->og_access_roles);
    foreach ($rids as $rid) {
      db_query("INSERT INTO {og_access_roles} (nid, rid) VALUES (%d,%d)", $node->nid, $rid);
    }
  }
}

/**
 * Remove nid, rid combinations from og_access_roles.
 *
 * @param $node The node that's having its nid, rid combinations removed.
 */
function og_access_roles_delete_roles(&$node) {
  db_query("DELETE FROM {og_access_roles} WHERE nid = %d", $node->nid);
}

/**
 * Load nid, rid combinations from og_access_roles.
 *
 * @param $node The node that's having its nid, rid combinations loaded.
 */
function og_access_roles_load_roles(&$node) {
  $node->og_access_roles = array();
  $result = db_query("SELECT nid, rid FROM {og_access_roles} WHERE nid = %d", $node->nid);
  while ($row = db_fetch_array($result)) {
    $node->og_access_roles[] = $row['rid'];
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function og_access_roles_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'load':
      if (og_is_group_post_type($node->type)) {
        og_access_roles_load_roles($node);
      }
      break;
    case 'insert':
      if (og_is_group_post_type($node->type)) {
        og_access_roles_insert_roles($node);
      }
      break;
    case 'update':
      if (og_is_group_post_type($node->type)) {
        og_access_roles_delete_roles($node);
        og_access_roles_insert_roles($node);
      }
      break;
    case 'delete':
      if (og_is_group_post_type($node->type)) {
        og_access_roles_delete_roles($node);
      }
      break;
    case 'presave':
      if (og_is_group_post_type($node->type)) {
        og_access_roles_presave_roles($node);
      }
      break;
  }
}

/**
 * Implementation of hook_og_access_grants_alter().
 */
function og_access_roles_og_access_grants_alter(&$grants, $node) {
  if (empty($node->og_public)) {
    if (is_array($node->og_access_roles)) {
      foreach ($node->og_access_roles as $rid) {
        $grants[] = array (
          'realm' => OG_ACCESS_ROLES_REALM,
          'gid' => $rid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
    }
  }
}

/**
 * Implementation of hook_node_grants().
 */
function og_access_roles_node_grants($account, $op) {
  $grants = array();

  foreach ($account->roles as $rid => $name) {
    $grants[OG_ACCESS_ROLES_REALM][] = $rid;
  }

  return $grants;
}

/**
 * Implementation of hook_node_access_explain.
 * 
 * This gives the Devel module nice information to display when
 * debugging node grants.
 */
function og_access_roles_node_access_explain($row) {
  if ($row->realm == OG_ACCESS_ROLES_REALM) {
    $roles = user_roles();
    $role_name = $roles[$row->gid];
    return t('Users in role <em>!role-name</em> may view this node.', array('!role-name' => $role_name));
  }
}

/**
 * Implementation of hook_views_api().
 */
function og_access_roles_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'og_access_roles') . '/includes/views',
  );
}
