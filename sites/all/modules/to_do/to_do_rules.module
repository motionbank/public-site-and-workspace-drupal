<?php


function to_do_rules_trigger($op, $node) {
  // call the event once per assigned user
  // (we assume that $node was properly loaded.)
  foreach ($node->assigned_users as $uid => $name) {
    // load the user since we want the signal to include
    // a full user object (so it can be used as such.)
    $assigned_user = user_load(array('uid' => $uid));
    if ($assigned_user) {
      rules_invoke_event($op, array('node' => $node, 'assigned_user' => $assigned_user));
    }
  }
}

function to_do_rules_to_do_started($op, $node) {
  to_do_rules_trigger('to_do_started', $node);
}

function to_do_rules_to_do_reminder($op, $node) {
  to_do_rules_trigger('to_do_reminder', $node);
}

function to_do_rules_to_do_deadline_reached($op, $node) {
  to_do_rules_trigger('to_do_deadline_reached', $node);
}

function to_do_rules_to_do_past_deadline($op, $node) {
  to_do_rules_trigger('to_do_past_deadline', $node);
}

function to_do_rules_to_do_finished($op, $node) {
  to_do_rules_trigger('to_do_finished', $node);
}

function to_do_rules_to_do_unpublished($op, $node) {
  to_do_rules_trigger('to_do_unpublished', $node);
}

function to_do_rules_to_do_deleting($op, $node) {
  to_do_rules_trigger('to_do_deleting', $node);
}


// vim: ts=2 sw=2 et syntax=php
